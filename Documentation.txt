Variables:
	Variables do not need to be initialized to a variable type, as they can contain as many variables of different types as needed.
	as such, each value is automatically detected for its type and stored, with the variable simply acting as a list for it.
	
	Variable Names must start with a letter, and can contain numbers and underscores.
	
	Worth noting is that uninitialized variables return [0] instead of error

Primitives:
	integers //0, -4, 249, ...
	floats   //0f, 0.1, -9.2f, 32F, ...
	strings  //"string here", ...
	chars    //'c', '\n', ...
	bool     //true, TRUE, false, FALSE
	null     //null, NULL

Functions:
	Variables:
		[variable] is [list]
			sets the given variable to the list given.
		
		[variable] is [variable2]
			sets the given variable to the current list of variable2
		
		[variable] is [variable]
			given that both variables have the same name, sets the given variable to be a constant.
			This is the same as "const {variable_type} var" in c
		
		[variable1] mimic [variable2]
			sets variable1 to mimic the contents of variable2 as they change.
			a single variable can mimic as many other variables as needed.
			for example:
				b is 5
				a mimic b and is 10
				a is print_structured //a is [*b[5], 10]
				b is 15
				a is print_structured //a is [*b[15], 10]
		
		not [variable]
			returns the inverse of the given variable.
			not [4, "string", true] returns [-4, "gnirts", false]
	
	Lists:
		[primitive] and [primitive]
			creates a list with the values given to it, order from left to right
		
		[list] and [primitive]
			adds the given value to the end of the list
		
		[primitive] and [list]
			adds the given value to the start of the list
		
		[list] get [primitive]
			returns the value stored at the specified location in the list.
			for example, [1, 5, 'c', 32] get ['b'] will return the 2nd element of the list, starting from 0, or ['c'].
			if it had been a negative value, or a value exceeding the length of the list (like 'A'), it will return [0]
		
		[list1] get [list2]
			returns a list composed of a bunch of get functions with input the elements of list2.
			for example, [1, 2, 3, 4, 5] get [4, 2, -1] will return [5, 3, 0].
			5 and 3 because we count from zero upwards, and 0 because slots outside the spectrum of the list return 0 by default.
		
		[primitive1] to [primitive2]
			returns a list, with its starting element being [primitive1] and its last element being [primitive2], smoothing in the two with a step of 1.
			for example, [1] to [5] returns [1, 2, 3, 4, 5]
						 [1.8f] to [5f] returns [1.8f, 2.6f, 3.4f, 4.2f, 5f]
	
	Operations:
		[list1] add [list2]
			returns a list that sums each element to its corresponding element on the other list.
			for example, [2, 4, 'b'] add [-1, 3] will return [1, 7, 'b']
			elements not present will be added up with zero
		
		[list1] div [list2]
			returns a list that divides on an integer level each element from list1 with its corresponding element from list2
			[7] div [3, 2] will return [2, 0]
		
		[list1] mod [list2]
			returns a list after enacting the modulo operation on each element from list1 with its corresponding element from list2
			[9, 3] mod [4] returns [1, 3]
			worth noting is that division with zero is not possible in this language, but also not prohibited.
			any divisions with zero yield the dividend instead.
		
		[list1] sub [list2]
			returns a list after subtracting each element of list1 with its corresponding element from list2
			[7, 'c'] sub [3, 1, 9] returns [4, 'b', -9]
			elements not present will be substituted with zero.
		
		[list1] mult [list2]
			returns a list after multiplying each element of list1 with its corresponding element from list2
			['d', 9, "string"] mult [2, -0.5, 2] returns ['h', -4.5, "stringstring"]
		
		[list1] split [list2]
			returns a list after dividing each element of list1 with its corresponding element from list2
			[5, "string"] split [2, 2, 2] returns [2.5, "str", 0]
		
		[list1] or [list2]
			returns a list applying the or operation to each element of list1 with its corresponding element from list2
			[4, true] or [9, false] will return [false, true]
		
		[list1] xor [list2]
			returns a list applying the xor operation to each element of list1 with its corresponding element from list2
			[4, true] or [9, true] will return [false, false]
		
		[list1] equals [list2]
			returns a list checking if each element from list 1 is equal to its corresponding element from list2
			[9, false, "hello"] equals [9f, false, "Hello"] returns [false, true, false]
			
	Commands:
		for [list] {block...}
			repeats the commands in the {block} an amount of times equal to the length of the list given.
			given a list [1, 2, 5], the loop will be completed 3 times.
		
		for [variable] {block...}
			repeats the commands in the {block} an amount of times equal to the length of the list the variable holds.
			with each iteration, the variable given will only have one value at a time, going from left to right.
			for example, given the variable a is [1, 5, 'c'], the loop will go like:
				a is 1
				block...
				a is 5
				block...
				a is 'c'
				block...
				a is [1, 5, 'c']
				end of loop
		
		if [list] {block}
			given that the list given is entirely true, will execute the commands of {block}.
			a list is entirely true if all its individual values are also true.
				for integers: 0
				for floats: 0f
				for strings / chars: "" / ' '
				for bools: true
				for nulls: null
		
		if [list] {block1} else {block2}
			given that the list is entirely true, will execute the commands of {block1}, otherwise will execute the commands of {block2}.
			this can be chained up with another if statement instead of {block2}.

		call [variable]
			executes any commands, lines, or blocks stored inside the variable.
			for example:
				a is (b is 5) and (b is print_structured)
				call a //b is 5

		[variable/list] is print
			prints the value of the variable/list given to it on the console.
			[5, 9, 3] //593
			note that this doesn't add the new line character at the end by default. a way arround that is to add it manually
			[5, 9, 3, '\n'] //593
							//
			
		[variable/list] is print_structured
			prints the value of the variable/list given to it on the console in a clear way. useful for debugging purposes
			[5, 9, 3] //5, 9, 3
					  //
			b is 5
			a is 1 to 4 and mimic b and 6 to 9
			a is print_structured //a is [1, 2, 3, 4, *b[5], 6, 7, 8, 9]
								  //
			
			note that this does add the new line character at the end by default, and that the formatting is automated.
			if you want more control over the layout, print provides much more control.

Lines:
	lines of code can be split up as many ways as one might need or want to, unaffected by new lines, tabs, spaces, or anything else.
	a 		is
	    5
	works the same as:
		a is 5
	
	surrounding a line of code with parentheses allows for the entire line to be considered a token.
	this allows a line to be set to a variable, set itself to a variable/list, print itself, ect.
	this works by finding the high priority targets within a line, usually the first elements given.
	for example:
		(a is 5) is print
	is the same as:
		a is 5
		a is print
	
	lines do not need the ; character at the end, and do not limit themselves to a single line of code per line of text.
	starting new commands after previous ones is possible. for example:
		a is 5 a is print
	works the same as
		a is 5
		a is print

Blocks:
	Blocks of code start with { and end with }. they can hold as many lines of code as one might need, but they must be seperated by comas.
	for example:
		{a is 5, a is print}
	
	blocks can also be used to set, be set, print, ect. just like lines with parentheses.
	the targets this time are all the priority targets of all the lines contained within the block itself.
	for example:
		{a is 5, b is 10} is print
	is the same as
		a is 5
		b is 10
		a and b is print
